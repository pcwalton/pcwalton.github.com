<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[pcwalton]]></title>
  <link href="http://pcwalton.github.com/atom.xml" rel="self"/>
  <link href="http://pcwalton.github.com/"/>
  <updated>2012-12-27T02:35:06-08:00</updated>
  <id>http://pcwalton.github.com/</id>
  <author>
    <name><![CDATA[Patrick Walton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Typestate Is Dead, Long Live Typestate!]]></title>
    <link href="http://pcwalton.github.com/blog/2012/12/26/typestate-is-dead/"/>
    <updated>2012-12-26T19:54:00-08:00</updated>
    <id>http://pcwalton.github.com/blog/2012/12/26/typestate-is-dead</id>
    <content type="html"><![CDATA[<p>One well-known fact about Rust is that the typestate system, which was one of the most unique aspects of the language early on, was dropped in Rust 0.4. The reason was that &#8220;in practice, it found little use&#8221; (courtesy of Wikipedia), which is fairly accurate. However, what&#8217;s less well known is that, in the meantime, Rust gained the building blocks necessary for typestate via its uniqueness typing system. With the right patterns, most of the safety guarantees that typestate enabled can be achieved, although it&#8217;s not as easy to use.</p>

<p>Let&#8217;s start with the simple example of a file that can be open or closed. We want to ensure at compile time that no methods that require the file to be open (for example, reading) can be called on the file while it is closed. With typestate, we would define the functions as follows:</p>

<pre><code>use core::libc;

struct File {
    descriptor: int
}

pred is_open(file: File) -&gt; bool {
    return file.descriptor &gt;= 0;
}

fn open(path: &amp;str) -&gt; File : is_open {
    let file = File { descriptor: libc::open(path) };
    check is_open(file);
    return file;
}

fn close(file: &amp;mut File) {
    libc::close(file.descriptor);
    file.descriptor = -1;
}

fn read(file: &amp;File : is_open, buf: &amp;mut [u8], len: uint) {
    libc::read(file.descriptor, ...)
}
</code></pre>

<p>And this is how this module might be used:</p>

<pre><code>fn main() {
    let file: File : is_open = open("hello.txt");
    read(&amp;file, ...);
    close(file);

    read(&amp;file, ...);    // error: expected File : is_open but found File
    check is_open(file); // will fail at runtime
}
</code></pre>

<p>The constructs here that differ from Rust of today are:</p>

<ul>
<li><p><em>Constraints</em> are special type kinds that can be attached to types with the <code>:</code> syntax; e.g. <code>File : is_open</code>.</p></li>
<li><p>The <code>pred</code> keyword declares a <em>predicate</em> function, which defines both a function and a constraint.</p></li>
<li><p>All values have unconstrained types when initially constructed. To add a constraint to a type, we use the <code>check</code> keyword. The <code>check</code> expression evaluates a predicate and fails at runtime if the predicate returns <code>false</code>; otherwise, it adds the appropriate constraint to the type of the predicate&#8217;s argument.</p></li>
</ul>


<p>Now let&#8217;s look at how we could achieve this in current Rust. We use the <em>branding pattern</em>:</p>

<pre><code>struct File&lt;State&gt; {
    priv descriptor: int,
}

// Make the type noncopyable.
impl&lt;T&gt; File&lt;T&gt; : Drop {
    fn finalize(&amp;self) {}
}

struct Open(@Open);
struct Closed(@Closed);

fn check_open&lt;T&gt;(file: File&lt;T&gt;) -&gt; File&lt;Open&gt; {
    assert file.descriptor &gt;= 0;
    let new_file: File&lt;Open&gt; = File {
        descriptor: file.descriptor
    };
    return new_file;
}

fn open(path: &amp;str) -&gt; File&lt;Open&gt; {
    let file: File&lt;Closed&gt; = File { descriptor: libc::open(path) };
    let file: File&lt;Open&gt; = check_open(file);
    return file;
}

fn close&lt;T&gt;(file: File&lt;T&gt;) -&gt; File&lt;Closed&gt; {
    let new_file: File&lt;Closed&gt; = File {
        descriptor: -1
    };
    libc::close(file.descriptor);
    return new_file;
}

fn read(file: &amp;File&lt;Open&gt;, buf: &amp;mut [u8], len: uint) {
    libc::read(file.descriptor, ...)
}
</code></pre>

<p>Using this code has a different feel to it:</p>

<pre><code>fn main() {
    let file: File&lt;Open&gt; = open("hello.txt");
    read(&amp;file, ...);
    let file: File&lt;Closed&gt; = close(file);

    read(&amp;file, ...);  // error: expected File&lt;Open&gt; but found File&lt;Closed&gt;
    let file: File&lt;Open&gt; = check_open(file); // will fail at runtime
}
</code></pre>

<p>The differences between this code and the original code using typestate are:</p>

<ul>
<li><p>Rather than directly altering the constraints attached to a value&#8217;s type, the functions that change typestate take a value of one type and return a different value of a different type. For example, <code>close()</code> takes a value of <code>File&lt;T&gt;</code> for any state <code>T</code> and returns a value of type <code>File&lt;Closed&gt;</code>.</p></li>
<li><p>Instead of the built-in notion of a predicate, this code uses a <em>phantom type</em>. A phantom type is a type for which no values can be constructed—in this example, there is no way to construct a value of type <code>Open</code> or <code>Closed</code>. Instead, these types are solely used as &#8220;markers&#8221;. In the code above, a value of type <code>File&lt;Open&gt;</code> represents an open file, and a value of type <code>File&lt;Closed&gt;</code> represents a closed file. We call these <em>branded types</em>, because <code>File</code> is <em>branded</em> with the <code>Open</code> or <code>Closed</code> status. Generics (e.g. <code>File&lt;T&gt;</code>) can be used when the state of a file is irrelevant; e.g. if a function can operate on both closed or open files.</p></li>
<li><p><code>File</code> instances are made noncopyable. This is important to prevent code like this from compiling:</p>

<pre><code>let file: File&lt;Open&gt; = open("hello.txt");
let _: File&lt;Closed&gt; = close(file); // ignore the return value
read(&amp;file, ...);  // error: use of moved value `file`
</code></pre></li>
</ul>


<p>The important idea is that to get a closed file, you must first surrender your open file. The uniqueness system in Rust allows the compiler to ensure this: when you change typestates, you must move your original value away, and the compiler will ensure that you can&#8217;t access it again.</p>

<ul>
<li><p>The file descriptor field is made private to the containing module. This is important to disallow other modules from forging open or closed <code>File</code> instances. Otherwise, other code could simply convert an open file to a closed file the same way <code>check_open</code> does:</p>

<pre><code>let open_file: File&lt;Open&gt; = open("hello.txt");
let closed_file: File&lt;Closed&gt; = close(open_file);
let fake_open_file: File&lt;Open&gt; = File { descriptor: closed_file };
// ^^^ error: use of private field 'descriptor'
read(&amp;fake_open_file, ...);
</code></pre></li>
</ul>


<p>Since the <code>File</code> structure contains a private field, no code other than the containing module can create one. In this way, we ensure that nobody can forge instances of <code>File</code> and violate our invariants.</p>

<p>Now, it&#8217;s obvious that this isn&#8217;t perfect in terms of usability. For one, it&#8217;s a design pattern, and design patterns are the sincerest form of request for syntax. I&#8217;m not particularly concerned about this aspect, however, because syntactic sugar is readily achievable with macros.</p>

<p>The issue that I&#8217;m concerned with is deeper. One nice thing about typestate as previously implemented is that you don&#8217;t have to surrender your value; you can effectively &#8220;mutate&#8221; its type &#8220;in-place&#8221;. This saves you from writing temporary variables all over the place and also saves some (cheap) copies at runtime. For example, you can write:</p>

<pre><code>let file = open("hello.txt");
read(&amp;file, ...);
close(file);
</code></pre>

<p>Instead of:</p>

<pre><code>let file = open("hello.txt");
read(&amp;file, ...);
let file = close(file);
</code></pre>

<p>In Rust, however, this causes complications, which we never fully resolved. (In fact, this is part of what led to typestate&#8217;s removal.) Suppose that <code>close</code> mutated the type of its argument to change it from <code>&amp;File&lt;Open&gt;</code> to <code>&amp;File&lt;Closed&gt;</code>. Then consider the following code:</p>

<pre><code>trait Foo {
    fn speak(&amp;self);
}

impl File&lt;Open&gt; : Foo {
    fn speak(&amp;self) {
        io::println("woof");
    }
}

trait Bar {
    fn speak(&amp;self, x: int);
}

impl File&lt;Closed&gt; : Bar {
    fn speak(&amp;self) {
        io::println("meow");
    }
}

let file = open("hello.txt");
for 5.times {
    file.speak();
    close(&amp;file);
}
</code></pre>

<p>How do we compile this code? The first time around the <code>for 5.times { ... }</code> loop, <code>file.speak()</code> should resolve to <code>Foo::speak</code>; the second time around, <code>file.speak()</code> should resolve to <code>Bar::speak</code>. Needless to say, this makes compiling extremely difficult: we would have to consider the lexical scope of every single method invocation and compile it for <em>each</em> possible predicate!</p>

<p>Because of these and other complications, mutating the type doesn&#8217;t seem possible in the general case. We would certainly need to introduce some set of restrictions—perhaps we would need to formalize the notion of a &#8220;constraint&#8221; in the type system (probably by introducing a new type kind) and then introduce some restrictions on implementation declarations to prevent instances from depending on constraints. Whatever system we come up would be pretty complex and would require a fair bit of thought to get right.</p>

<p>So I&#8217;d like to try to play with the current setup and see how far we get with it. In future versions of the language (post-1.0), it might be worthwhile to try to allow some sort of in-place &#8220;mutation&#8221; of types, similar to languages with true typestate. Overall, though, the combination of uniqueness and branding places today&#8217;s Rust in an interesting position, supporting much of the power that came with typestate in a simple system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unique Pointers Aren't Just About Memory Management]]></title>
    <link href="http://pcwalton.github.com/blog/2012/10/03/unique-pointers-arent-just-about-memory-management/"/>
    <updated>2012-10-03T11:32:00-07:00</updated>
    <id>http://pcwalton.github.com/blog/2012/10/03/unique-pointers-arent-just-about-memory-management</id>
    <content type="html"><![CDATA[<p>One of the most unusual features of Rust, especially when compared to languages that aren&#8217;t C++, is the three types of pointers: <em>borrowed</em> pointers (<code>&amp;T</code>), <em>unique</em> pointers (<code>~T</code>), and <em>managed</em> pointers (<code>@T</code>). Most people quite rightly ask &#8220;why three pointers? Isn&#8217;t one enough?&#8221; The usual answer is that unique pointers help with manual memory management:</p>

<ul>
<li><p>Managed pointers (<code>@T</code>) allow convenient garbage collection.</p></li>
<li><p>Unique pointers (<code>~T</code>) work like <code>malloc</code> and <code>free</code> from C to allow programmers who don&#8217;t want the overhead and complexity of GC to avoid it.</p></li>
<li><p>Borrowed pointers (<code>&amp;T</code>) allow functions to work equally well with both unique and managed pointers.</p></li>
</ul>


<p>This is all true, but there&#8217;s another, equally important reason that&#8217;s often overlooked: unique pointers allow for efficient, safe concurrency.</p>

<p>To see why, let&#8217;s consider the possible ways that an actor- or CSP-based system could enforce safe message passing. By <em>safe</em> message passing I mean that actors can&#8217;t create data races by simultaneously accessing shared mutable data. In short, we want to enforce that this adage is followed (courtesy of Rob Pike)&#8211;&#8220;do not communicate by sharing memory; share memory by communicating.&#8221;</p>

<p>There are three simple ways to do this:</p>

<ol>
<li><p>Copy all messages sent from actor to actor. Changes that one actor makes to the contents of any message do not affect the other actors&#8217; copies of the message.</p></li>
<li><p>Require that all messages sent from actor to actor be immutable. No actor may make changes to any message after it&#8217;s created.</p></li>
<li><p>Make messages inaccessible to the sender once sent&#8211;senders &#8220;give away&#8221; their messages. Only one actor may mutate a message at any given time.</p></li>
</ol>


<p>Each of these patterns has advantages and disadvantages:</p>

<ol>
<li><p>Copying all messages has the advantage that it&#8217;s simple to reason about, and the programmer doesn&#8217;t have to worry about mutability restrictions. The disadvantage is that it comes with a significant performance cost, both in terms of allocation overhead and the copying itself.</p></li>
<li><p>Requiring that messages be immutable has the advantage that many messages can be efficiently sent, but it still can lead to copying in many cases. Consider, for example, an application that spawns off a task to decode a large JPEG image. To be efficient, the image decoding algorithm generally wants to decode into a mutable buffer. But the decoded image data must be immutable to be sent, which necessitates a potentially-expensive copy of the pixel data out of the work buffer to an immutable location.</p></li>
<li><p>Making messages inaccessible to the sender has the advantage that it&#8217;s simple and fast, but it has the disadvantage that it could lead to copying if both the sender and receiver need to access the memory after the send operation.</p></li>
</ol>


<p>Because one pattern rarely fits every use case, most actor-based languages, including Rust, have varying levels of support for all three of these patterns (and for more complex patterns that don&#8217;t appear in the above list, such as <a href="http://en.wikipedia.org/wiki/Software_transactional_memory">software transactional memory</a>). However, each language tends to favor one of the three patterns &#8220;by default&#8221;. For example, Erlang leans toward option #1 (copying all messages), Clojure leans toward option #2 (immutable sharing), while Rust leans toward option #3 (giving messages away). The important thing to note here is that all of the patterns have advantages and disadvantages, and so different scenarios will call for one or the other. Consider the image decoding example from before; pattern #3 is by far the most efficient way to handle this, as the buffer needs to be mutable while the image decoder works on it, but the decoder has no need for the image after decoding is done.</p>

<p>Now the simplest way to support pattern #3 <em>safely</em>&#8211;in other words, to enforce <em>at compile time</em> that only one actor can hold onto a message at any given time&#8211;is through unique pointers. The compiler guarantees that only one reference exists to a uniquely-owned object, enforcing the property we want. Unique pointers support a <em>move</em> operation, which allows functions to &#8220;give a pointer away&#8221; to another function. So by simply requiring that the &#8220;send&#8221; method takes a unique pointer and moves its argument, we teach the compiler everything it needs to know to enforce safe concurrency.</p>

<p>In this way, unique pointers aren&#8217;t just a tool for manual memory management. They&#8217;re also a powerful tool for eliminating data races at compile time. The fact that they also allow Rust programs to avoid the garbage collector is just an added bonus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Gentle Introduction to Traits in Rust]]></title>
    <link href="http://pcwalton.github.com/blog/2012/08/08/a-gentle-introduction-to-traits-in-rust/"/>
    <updated>2012-08-08T10:46:00-07:00</updated>
    <id>http://pcwalton.github.com/blog/2012/08/08/a-gentle-introduction-to-traits-in-rust</id>
    <content type="html"><![CDATA[<p>Rust traits pack a lot of flexibility into a simple system, and they&#8217;re one of my favorite features of the language. But as a result of the rapid pace of the language&#8217;s development, there&#8217;s been a fair amount of confusion as to how they work. As such, I figured I&#8217;d write up a quick tutorial explaining why and how to use them.</p>

<p>This tutorial assumes only basic knowledge of C-like languages, so I&#8217;ll try to explain everything specific to Rust that might be unclear along the way. Also note that a couple of these features are unimplemented, so if you try this today the syntax will be a little different.</p>

<h2>Simple implementations</h2>

<p>In keeping with the theme of my previous blog posts on classes, let&#8217;s start by writing a game. I&#8217;ll start by defining a struct <code>Monster</code> and a struct <code>Player</code> like this:</p>

<pre><code>struct Monster {
    name: &amp;str;      // `&amp;str` is a reference to a string
    mut health: int; // `mut` indicates that the health can be changed
}

struct Player {
    mut health: int;
}
</code></pre>

<p>Now I can create instances of each:</p>

<pre><code>fn main() {  // `fn` defines a function
    let monster = Monster {
        name: "Gelatinous Cube",
        health: 50
    };
    let player = Player {
        health: 100
    };
}
</code></pre>

<p>Without some functionality, this isn&#8217;t a particularly interesting game. So let&#8217;s add a method to <code>Monster</code>:</p>

<pre><code>impl Monster {
    fn attack(&amp;self, player: &amp;Player) {
        // fmt! is string formatting; this prints "Gelatinous Cube hits you!"
        io::println(fmt!("%s hits you!", self.name));
        player.health -= 10;
    }
}
</code></pre>

<p>And I can call it this way, inside <code>main</code>:</p>

<pre><code>monster.attack(&amp;player);
</code></pre>

<p>There are several things to note here.</p>

<ul>
<li><p>References are explicit in Rust: the <code>&amp;</code> sigil indicates that the method <code>attack</code> takes a reference to the player, not the player itself. If I didn&#8217;t write that, then the player would be copied into the method instead (and we&#8217;d get a compiler warning, because this indicates a bug).</p></li>
<li><p>I use the keyword <code>impl</code> to declare methods for a type. <code>impl</code> declarations can appear  anywhere in the module that declared the type. The <code>struct</code> and <code>impl</code> pair appears a lot in Rust code; it nicely separates out data from implementation. Objective-C and C++ programmers will find this familiar.</p></li>
<li><p>Within an implementation, functions with a <code>self</code> parameter become methods. Python programmers will find this &#8220;explicit self&#8221; familiar. Because references are explicit in Rust, you specify how <code>self</code> is supposed to be passed; in this case, by reference (<code>&amp;self</code>).</p></li>
</ul>


<h2>Generics</h2>

<p>Now that we have basic implementations covered, let&#8217;s look at something completely different: generics. (We&#8217;ll come back to implementations later on.) Like many other languages, Rust features generic functions: functions that can operate on many different types. For example, here&#8217;s a function that returns true if a vector is empty:</p>

<pre><code>// Vectors are written with square brackets around the type; e.g. a vector of
// ints is written `[int]`.
fn is_empty&lt;T&gt;(v: &amp;[T]) -&gt; bool {
    return v.len() == 0;
}
</code></pre>

<p>The generic type parameters are written inside the angle brackets (<code>&lt;</code> and <code>&gt;</code>), after the function name.</p>

<p>There&#8217;s nothing much more to say here; generics are pretty simple. In this form, however, they&#8217;re pretty limited, as we&#8217;ll see.</p>

<h2>Limitations of generics</h2>

<p>Let&#8217;s go back to our game example. Suppose I want to add functionality to save the state of the game to disk in <a href="http://en.wikipedia.org/wiki/JSON">JSON</a>. I&#8217;ll implement some methods on <code>Monster</code> and <code>Player</code> to do this:</p>

<pre><code>impl Monster {
    // `~str` means "a pointer to a string that'll be automatically freed"
    fn to_json(&amp;self) -&gt; ~str {
        return fmt!("{ name: \"%s\", health: %d }", self.name, self.health);
    }
}

impl Player {
    fn to_json(&amp;self) -&gt; ~str {
        return fmt!("{ health: %d }", self.health);
    }
}
</code></pre>

<p>Now imagine that I wanted a function to save any actor (either a monster or a player) into a file. Because monsters and players are different types, I need to use a generic function to handle both. My first attempt at the function looks like this:</p>

<pre><code>fn save&lt;T&gt;(filename: &amp;str, actor: &amp;T) {
    // Because the writer returns an error code, I use .get() to mean "require
    // that this succeeded, and abort the program if it didn't".
    let writer = io::file_writer(filename, [ io::create, io::truncate ]).get();
    writer.write(actor.to_json());
    // Because of RAII, the file will automatically be closed.
}
</code></pre>

<p>Uh-oh. This doesn&#8217;t compile. I get the following error: &#8220;attempted access of field <code>to_json</code> on type <code>&amp;T</code>, but no public field or method with that name was found&#8221;.</p>

<p>What the Rust compiler is telling me is that it doesn&#8217;t know that the type <code>T</code> in this function contains the method <code>to_json</code>. And, in fact, it might not. As written above, it&#8217;d be perfectly legal to call <code>save</code> on any type at all:</p>

<pre><code>struct Penguin {
    name: &amp;str;
}

save("penguin.txt", &amp;Penguin { name: "Fred" });
// But how do I convert penguins to JSON?
</code></pre>

<p>So I&#8217;m stuck. But Rust provides a solution: traits.</p>

<h2>Trait declaration</h2>

<p>Traits are the way to tell the Rust compiler about <em>functionality that a type must provide</em>. They&#8217;re very similar in spirit to interfaces in Java, C#, and Go, and are similar in implementation to typeclasses in Haskell. They provide the solution to the problem I&#8217;m facing: I need to tell the Rust compiler, first of all, that some types can be converted to JSON, and, additionally, for the types that can be converted to JSON, how to do it.</p>

<p>To define a trait, I simply use the <code>trait</code> keyword:</p>

<pre><code>trait ToJSON {
    fn to_json(&amp;self) -&gt; ~str;
}
</code></pre>

<p>This declares a trait named <code>ToJSON</code>, with one method that all types that implement the trait must define. That method is named <code>to_json</code>, and it takes its <code>self</code> parameter by reference.</p>

<p>Now I can define implementations of <code>ToJSON</code> for the various types I&#8217;m interested in. These implementations are exactly the same as above, except that we add <code>: ToJSON</code>.</p>

<pre><code>impl Monster : ToJSON {
    // `~str` means "a pointer to a string that'll be automatically freed"
    fn to_json(&amp;self) -&gt; ~str {
        return fmt!("{ name: \"%s\", health: %d }", self.name, self.health);
    }
}

impl Player : ToJSON {
    fn to_json(&amp;self) -&gt; ~str {
        return fmt!("{ health: %d }", self.health);
    }
}
</code></pre>

<p>That&#8217;s all there is to it. Now I can modify the <code>save</code> function so that it does what I want.</p>

<h2>Trait usage</h2>

<p>Recall that the reason why the <code>save</code> function didn&#8217;t compile is that the Rust compiler didn&#8217;t know that the <code>T</code> type contained a <code>to_json</code> method. What I need is some way to tell the compiler that this function only accepts types that contain the methods I need to call. This is accomplished through <em>trait restrictions</em>. I modify the <code>save</code> function as follows:</p>

<pre><code>fn save&lt;T:ToJSON&gt;(filename: &amp;str, actor: &amp;T) {
    let writer = io::file_writer(filename, [ io::create, io::truncate ]).get();
    writer.write(actor.to_json());
}
</code></pre>

<p>Note the addition of <code>:ToJSON</code> after the type parameter. This indicates that the function can only be called with types that implement the trait.</p>

<p>Now these calls to <code>save</code> will compile:</p>

<pre><code>save("player.txt", &amp;player);
save("monster.txt", &amp;monster);
</code></pre>

<p>But this call will not:</p>

<pre><code>save("penguin.txt", &amp;Penguin { name: "Fred" });
</code></pre>

<p>I get the error &#8220;failed to find an implementation of trait <code>ToJSON</code> for <code>Penguin</code>&#8221;, just as expected.</p>

<h2>Summing up</h2>

<p>These are the basic features of traits and comprise most of what Rust programmers will need to know. There are only a few more features beyond these, which I&#8217;ll mention briefly:</p>

<ul>
<li><p><em>Special traits</em>. Some traits are known to the compiler and represent the built-in operations. Most notably, this includes the ubiquitous <code>copy</code> trait, which invokes the copy operation that occurs when you assign with <code>let x = y</code>. You&#8217;ll see <code>T:copy</code> in many generic functions for this reason. Other special traits include <code>send</code>, which is a trait that indicates the type is sendable, and <code>add</code>, <code>sub</code>, etc, which indicate the built-in arithmetic operators. The key is that, in all cases, traits simply specify <em>what a generic type can do</em>; when you want to do something with a type parameter like <code>T</code>, you specify a trait.</p></li>
<li><p><em>Generic traits</em>. Traits can be generic, which is occasionally useful.</p></li>
<li><p><em>Default implementations</em>. It&#8217;s often helpful for traits to provide default implementations of their methods that take over when the type doesn&#8217;t provide an implementation of its own. For example, the default implementation of <code>to_json()</code> might want to use the Rust reflection API to automatically create JSON for any type, even if that type doesn&#8217;t manually implement the <code>to_json()</code> method. (Note that this feature is currently being implemented.)</p></li>
<li><p><em>Trait composition</em>. Sometimes we want one trait to include another trait. For example, the <code>Num</code> trait, which all number types in the language implement, obviously includes addition, subtraction, multiplication, etc. Trait composition allows traits to be &#8220;glued together&#8221; in this way. Note that this isn&#8217;t <em>inheritance</em>; it&#8217;s simply a convenience that allows trait methods to be combined together, like a mixin. (This is not fully implemented yet.)</p></li>
<li><p><em>First-class trait values</em>. Rarely, it&#8217;s necessary to have a trait be a first-class value, like in Java or Go, instead of attached to a generic type parameter. This doesn&#8217;t come up particularly often, but Rust does support it in the rare cases in which it&#8217;s needed. Idiomatic Rust uses generics instead of Java-like interfaces.</p></li>
</ul>


<p>That&#8217;s about all there is to traits. Traits are essentially Rust&#8217;s object system, but they&#8217;re simpler than many object systems and integrate especially well with generics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maximally Minimal Classes for Rust]]></title>
    <link href="http://pcwalton.github.com/blog/2012/06/03/maximally-minimal-classes-for-rust/"/>
    <updated>2012-06-03T14:35:00-07:00</updated>
    <id>http://pcwalton.github.com/blog/2012/06/03/maximally-minimal-classes-for-rust</id>
    <content type="html"><![CDATA[<p>Now that classes have been implemented as per the original proposal, the other Rusters and I have been starting to get a feel for the way they work out in practice. The results are positive, but not optimal. Although they definitely succeeded in avoiding the rigidity of traditional object-oriented languages like Java, they still have two basic problems: (1) they feel somewhat out of place with the rest of the language; and (2) they&#8217;re still too heavyweight. Nevertheless, the functionality that they enabled is important, and we shouldn&#8217;t sacrifice it.</p>

<p>Language design tends to go in cycles: we grow the language to accommodate new functionality, then shrink the language as we discover ways in which the features can be orthogonally integrated into the rest of the system. Classes seem to me to be on the upward trajectory of complexity; now it&#8217;s time to shrink them down. At the same time, we shouldn&#8217;t sacrifice the functionality that they enable.</p>

<p>In Rust, classes provide five main pieces of functionality that don&#8217;t otherwise exist: (1) nominal records; (2) constructors; (3) privacy on the field level; (4) attached methods; and (5) destructors. I&#8217;ll go over these five features in turn and discuss how each one could be simplified.</p>

<h2>Nominal records</h2>

<p>Classes in Rust are nominal records. A class in this form:</p>

<pre><code>class monster {
    let mut health: int;
    let name: str;
}
</code></pre>

<p>Is basically the moral equivalent of:</p>

<pre><code>enum monster {
    monster({
        mut health: int,
        name: str
    })
}
</code></pre>

<p>Clearly, the class form is much easier to read and much less confusing for users of the language; &#8220;enum&#8221; makes little sense as there&#8217;s nothing enumerated here. Nevertheless, there&#8217;s a bit of unnecessary noise in the form of the <code>let</code> keyword. We could simplify it to:</p>

<pre><code>class monster {
    mut health: int,
    name: str
}
</code></pre>

<p>It&#8217;s less typing, and it matches record syntax exactly.</p>

<h2>Constructors</h2>

<p>Those who have used Rust classes in their current form know that the above example class <code>monster</code> is incomplete. I still have to define a constructor for <code>monster</code>, like so:</p>

<pre><code>class monster {
    let mut health: int;
    let name: str;

    new(health: int, name: str) {
        self.health = health;
        self.name = name;
    }
}
</code></pre>

<p>This is probably the most burdensome part of classes as they currently stand&#8211;having to repeat each field name four times, and each type twice, is annoying. Many languages have solutions for this (CoffeeScript and Dart, for example), so we could consider adopting one of these languages&#8217; syntactic sugar for something like:</p>

<pre><code>class monster {
    let mut health: int;
    let name: str;

    new(self.health, self.name) {}  // sugar for the above
}
</code></pre>

<p>Unfortunately, it doesn&#8217;t stop there. Constructors have other problems. For one, there can only be one constructor per class&#8211;this is far more restrictive than Java, which permits constructor overloading. Worse, constructors can&#8217;t indicate that they failed; they can only fail the task or set some internal &#8220;this failed&#8221; flag, both of which are clearly unsatisfactory. The right way to report a recoverable error to the caller in Rust is to use the <code>result</code> type, but constructors can&#8217;t return <code>result&lt;self&gt;</code>; they can only return <code>self</code>.</p>

<p>I think the easiest way to address these problems is, following the idea that classes are just nominal records, is to abolish constructors entirely and adopt record literal syntax for initializing classes. So a class like this:</p>

<pre><code>class monster {
    mut health: int,
    name: str
}
</code></pre>

<p>Would be initialized with:</p>

<pre><code>let foe = monster {
    health: 100,
    name: "Bigfoot"
};
</code></pre>

<p>If you want to declare one or more &#8220;constructor&#8221; functions, perhaps to signal success or failure, that&#8217;s easy; they&#8217;re just functions in the same crate:</p>

<pre><code>fn monster(health: int, name: str) -&gt; result&lt;monster&gt; {
    if name == "King Kong" || name == "Godzilla" {
        ret err("Trademark violation");
    }
    ret ok(monster { health: health, name: name });
}
</code></pre>

<p>But note that you only have to write a constructor if you&#8217;re doing something special, like returning an error or initializing private fields. If your class is simple and merely holds public state, then your callers can just use the record literal syntax to create instances of the class.</p>

<h2>Privacy</h2>

<p>Classes in Rust allow private fields:</p>

<pre><code>class monster {
    let priv mut health: 100;
    let name: str;

    ...

    fn hit() {
        self.health -= 10;
    }
}
</code></pre>

<p>This is extremely useful functionality for modularity. But Rust already has a mechanism for privacy, via exports. For example, in order to write an enum whose contents are hidden from the outside world:</p>

<pre><code>enum color {
    priv red;
    priv green;
    priv blue;
}
</code></pre>

<p>(Note that the syntax here is changing; for posterity, I&#8217;m using the new syntax, but note that the code here doesn&#8217;t work at the time of this writing, as it&#8217;s not yet implemented.)</p>

<p>Only this module can construct instances of this enum, or even inspect its contents, because while the enum itself can be named, none of its variants can. So we could apply the same principle to fields of classes:</p>

<pre><code>mod A {
    mod B {
        class monster {
            priv mut health: int,
            name: str
        }

        fn hit(monster: &amp;monster) {
            monster.health -= 10;    // OK
        }
    }

    fn heal(monster: &amp;monster) {
        monster.health += 10;        // error: field "health" is private
    }
}
</code></pre>

<p>Here, a field marked with <code>priv</code> can only be named (and therefore accessed) by the enclosing module or containing modules. It works like every other instance of <code>priv</code> in the language: it restricts the use of a name to the enclosing module and its submodules.</p>

<p>It would be an error for modules that aren&#8217;t the module defining the class or an enclosing module to attempt to construct an instance of a class with a private field with the record literal syntax. This means that, if you use private fields, you need a constructor if you want your class instances to be constructible by the outside world.</p>

<h2>Methods</h2>

<p>Naturally, Rust classes support attached methods; this is much of the reason for their existence. But Rust already has a mechanism for creating methods&#8211;namely, typeclasses. We could write the above <code>monster</code> declaration this way:</p>

<pre><code>mod A {
    class monster {
        priv mut health: int,
        name: str
    }

    impl monster for &amp;monster {
        fn hit() {
            self.health -= 10;
        }
    }
}
</code></pre>

<p>The trick here is that the typeclass implementation is named <code>monster</code>, so a declaration like <code>import A::monster</code> will import both the class and the implementation. This entire scenario works because, with privacy restricted to the module, there is no need to place methods inside the class to achieve privacy.</p>

<p>Sometimes, it&#8217;s useful to have the hidden <code>self</code> parameter actually be a GC&#8217;d pointer to an instance of the class. In the original class proposal, this is accomplished with a separate type of class named <code>@class</code>. However, with this revised proposal, the <code>@class</code> functionality falls out naturally, without any extra features:</p>

<pre><code>class monster {
    priv mut health: int,
    name: str,
    friends: dvec&lt;@monster&gt;  // a dynamic vector
}

impl monster for @monster {
    fn befriend(new_friend: @monster) {
        new_friend.friends.push(self);
    }
}
</code></pre>

<p>It&#8217;d be best if we could eliminate the repetition of the <code>monster</code> name in the <code>impl</code> declaration, so I propose inferring it:</p>

<pre><code>impl for @monster {
    fn befriend(new_friend: @monster) {
        new_friend.friends.push(self);
    }
}
</code></pre>

<p>The name of the implementation would automatically be inferred to be the name of the class if, given a class C, the type is one of <code>C</code>, <code>@C</code>, <code>~C</code>, or <code>&amp;C</code>.</p>

<p>Note that, since traits can be applied to implementations, we can apply traits to classes in this way.</p>

<p>It would be ideal to eliminate the <code>impl</code> declaration entirely. However, this relies on typeclass coherence, which I&#8217;d like to keep separate to avoid coupling proposals. Nevertheless, it&#8217;s worth mentioning; so, in a forthcoming post, I&#8217;ll show how typeclass coherence can make method declaration syntax even simpler.</p>

<h2>Destructors</h2>

<p>Classes are intended to be the only mechanism for destructors in Rust. Unfortunately, there&#8217;s no obvious way to eliminate destructors from classes in a minimal way. There are a number of options:</p>

<ol>
<li><p>Keep destructors in classes, and remove resources.</p></li>
<li><p>Keep resources around, and remove destructors from classes.</p></li>
<li><p>Make the destructor interface (<code>drop</code>) into a special kind of &#8220;intrinsic interface&#8221; which enforces <em>instance coherence</em>. Then remove both resources and destructors from classes. (Recall that instance coherence means that each class can only have one implementation of an interface, which is clearly, to my mind, a necessity if destructors are to become an interface.)</p></li>
<li><p>Make <em>all</em> interfaces enforce instance coherence, make <code>drop</code> into an interface, and remove both resources and destructors from the language.</p></li>
</ol>


<p>I prefer option (4), but, as mentioned before, that&#8217;s a separate issue.</p>

<p>Finally, with nearly all of the special functionality of classes removed, it&#8217;s worth asking why records continue to exist. Indeed, I&#8217;ve been thinking for a while that structural records should be removed from the language, but the reasons for this tie into a deeper discussion on structural and nominal types and deserve their own blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coherence, modularity, and extensibility for typeclasses]]></title>
    <link href="http://pcwalton.github.com/blog/2012/05/28/coherence/"/>
    <updated>2012-05-28T22:12:00-07:00</updated>
    <id>http://pcwalton.github.com/blog/2012/05/28/coherence</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been experimenting with the design of a modification to Rust typeclasses. Because it&#8217;s always best to start with code, here&#8217;s a synopsis of what I have in mind:</p>

<pre><code>mod A {
    // Declaration of an interface:
    iface to_str {
        fn to_str() -&gt; str;

        // Implementations for various types:

        impl int {
            fn to_str() -&gt; str {
                ... implementation of to_str on ints ...
            }
        }

        impl uint {
            fn to_str() -&gt; str {
                ... implementation of to_str on unsigned ints ...
            }
        }

        ... more types here ...
    }

    // Define a class and declare that it implements to_str:
    class foo : to_str {
        fn to_str() {
            ret "foo";
        }
    }
}

mod B {
    import A::to_str;    // Must import the interface first, so
                         // that the compiler can find the method
                         // "to_str".

    println(3.to_str()); // Calls the "to_str" defined above.
}

mod C {
    let x = A::foo();    // Creates a foo object named "x".

    x.to_str();          // Calls "to_str" on "x". Note that I
                         // didn't have to import the "to_str"
                         // method in this scope—since it was
                         // defined inside the declaration of the
                         // class "foo", it's obvious what the
                         // implementation is.
} 
</code></pre>

<p>Essentially, the implementations of an interface go <em>inside</em> the declaration of the interface, with one significant exception: a class is permitted to define implementations of interfaces in the body of the class. The compiler prohibits multiple implementations of the same interface on the same type using two simple rules: (1) implementations defined within an interface must be non-overlapping (i.e. there can&#8217;t be any types which match multiple implementations); and (2) a class can&#8217;t implement an interface that already defines an implementation which might itself match an instance of that class.</p>

<p>The fact that the implementations go inside the interface is a little strange—it resembles the proposed Java defender methods, although it&#8217;s used for a completely different purpose—but I believe there is an important reason for it. It means that, if a programmer wants to look up the definition of a method call, he or she can simply figure out which interface it belongs to, which must always be in scope via an <code>import</code> statement, and then look at the declaration of the interface to find the method.</p>

<p>Fundamentally, the guiding principles behind this design are that the typeclass system should be <em>coherent</em> and <em>modular</em> while supporting <em>extensibility</em>. Here are the definitions of these terms as I see them:</p>

<p><em>Coherent</em> — A typeclass system is coherent if there exists at most one implementation of an interface for every type. Typeclass systems that don&#8217;t have this property have the <em>instance coherence</em> problem (or, as we called it when we independently stumbled across it, the &#8220;hash table problem&#8221;.)</p>

<p><em>Modular</em> — A typeclass system is modular if the unit in the source code that carries the implementation for every method must be in the lexical scope of every call site that needs the implementation (or, for nominal types only, in the lexical scope of the declaration of the type). This is a little unclear, so some examples are in order. First, a simple one:</p>

<pre><code>import vec::len;
printf("The length is %u", [ 1, 2, 3 ].len());
</code></pre>

<p>In this example, we need the implementation for <code>len</code> in scope in order to make a direct call to the method <code>len</code>.</p>

<p>Now a more complex example:</p>

<pre><code>fn print_length&lt;T:len&gt;(x: T) {
    printf("The length is %u", x.len());
}

import vec::len;
print_length([ 1, 2, 3 ]);
</code></pre>

<p>Here, we need the definition of <code>len</code> in scope at the time we call <code>print_length</code>. Because <code>print_length</code> can print the length of any value that implements the <code>len</code> interface, it doesn&#8217;t intrinsically know which method to call. This information has to be provided by the caller of <code>print_length</code>. For this reason, the call to <code>print_length</code> requires the implementation <code>vec::len</code> to be in scope.</p>

<p>In typeclass systems that aren&#8217;t modular, modules that define conflicting typeclass implementations usually can&#8217;t be linked together. For instance, in such a system, if module <code>A</code> implements <code>len</code> for vectors and module <code>B</code> independently implements <code>len</code> for vectors, then modules A and B can&#8217;t be used together in the same program. Obviously, this poses a hazard for large systems composed of many independently developed submodules.</p>

<p><em>Extensibility</em> — A typeclass system facilitates extensibility if it&#8217;s possible for the programmer to introduce a new interface and provide implementations of that interface for existing types in the system. This is what makes typeclasses act like object extensions; it&#8217;s also what makes user-defined typeclasses useful on primitive types.</p>

<p>Many languages have typeclass or interface systems, but to my knowledge none of the mainstream systems support all three of these features. For example:</p>

<p><em>C++</em>—C++ concepts support extensibility, but aren&#8217;t coherent and are only somewhat modular. The C++ language permits out-of-line definition of custom operations on class and enum types. As an example, to provide an ordering on vectors of integers:</p>

<pre><code>#include &lt;vector&gt;
bool operator&lt;(std::vector&lt;int&gt; &amp;a, std::vector&lt;int&gt; &amp;b) {
    ...
}
</code></pre>

<p>In this way, C++ concepts are extensible. But there&#8217;s no check to ensure that there is only such definition in the program for each data type, so C++ concepts aren&#8217;t coherent. In this example, other namespaces can define <code>operator&lt;</code> over the same types.</p>

<p>Generally, C++ scoping rules ensure that a function can never be called outside of its lexical scope. But there is a significant exception: argument-dependent lookup. With ADL, a function can be called outside of its lexical scope if that function was defined in the same scope as the type of one of its arguments. This feature was intended for extensibility, as it allows collections like <code>std::map</code> to pick up definitions of functions like <code>operator&lt;</code> even if the functions aren&#8217;t in scope. However, it clearly comes at the cost of modularity.</p>

<p><em>Haskell</em>—Haskell typeclasses are coherent and support extensibility, but aren&#8217;t modular. Haskell programmers can define instances of typeclasses for any type in the system, but there can be only one instance of a typeclass for every type in the program. This can cause problems when two modules are linked together—if, say, module A defines <code>Show</code> of <code>int</code> and module B independently defines <code>Show</code> of <code>int</code>, modules A and B can&#8217;t be linked together.</p>

<p><em>Java</em> and <em>Go</em>—Java interfaces are modular and coherent, but aren&#8217;t extensible. In Java, an implementation of an interface can be defined only within the package that declares the type. This means, in particular, that interfaces can&#8217;t be defined on primitive types. It also means that a module can&#8217;t define an interface and then declare an implementation of the interface on existing types without modifying the existing type. Go interfaces have the same limitations (unless you define an interface over methods that are already defined on the type in question).</p>

<p><em>Scala</em>—Scala interfaces are modular but only mostly coherent; they also offer some support for extensibility. Unsurprisingly, interfaces in Scala are basically the same as interfaces in Java. The major difference is that, unlike Java, Scala provides a mechanism for extending classes with implementations of interfaces without having to modify the definition of the class—namely, implicits. This feature is extremely useful for extensibility; it also solves the problem of methods on primitive types in an elegant way. The trouble is that implicits are somewhat inconvenient to use; the programmer must define an implicit wrapper around the object, so the <code>this</code> parameter won&#8217;t refer to the object itself but rather to the wrapper. Equally importantly, implicits don&#8217;t enforce coherence—two modules can define two different implicits on the same type.</p>

<p><em>Objective-C</em>—Objective-C categories support extensibility, but aren&#8217;t modular or coherent. In Objective-C, methods can be added to existing objects by defining a new category for that object and placing the methods within that category. The problems with categories are that method calls are all late-bound (precluding static scoping), and what happens when two modules that define conflicting category implementations are linked together is <em>undefined</em>: the resulting object might provide one implementation, or it might provide the other implementation. Either way, the resulting program is unlikely to work.</p>

<p><em>Current Rust</em>—The current Rust implementation of typeclasses is modular and supports extensibility, but it doesn&#8217;t maintain coherence. Implementations are separate from interfaces in Rust (except for classes), and interfaces and implementations can both be defined over primitive types. The trouble is that there can be multiple conflicting implementations for typeclasses, which can lead to the instance coherence problem.</p>

<p>So how does this proposed design compare?</p>

<ul>
<li><p>It offers coherence because there can be only one implementation of an interface for each type. For the implementations provided within the interface itself, we can check that they&#8217;re nonoverlapping. For the implementations defined with classes, we can check to ensure that the interface implementations don&#8217;t overlap with the implementations that the interface itself defined. Either way, the checks involved are simple and ensure that we meet the criterion for coherence.</p></li>
<li><p>It offers modularity because the implementation either has to be imported as part of the interface (for implementations defined inside interfaces) or part of the nominal type (for class implementations). Consequently, it is never the case that two Rust crates cannot be linked together because of conflicting typeclass implementations.</p></li>
<li><p>It offers extensibility because, when an interface is defined, implementations can be provided for any existing types without modifying the declarations of those types.</p></li>
</ul>


<p>Finally, it supports all three of these features while maintaining a minimal feature set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Lifetimes?]]></title>
    <link href="http://pcwalton.github.com/blog/2012/04/23/why-lifetimes/"/>
    <updated>2012-04-23T23:19:00-07:00</updated>
    <id>http://pcwalton.github.com/blog/2012/04/23/why-lifetimes</id>
    <content type="html"><![CDATA[<p>One of the most unique new features of Rust is its slowly-growing support for <em>regions</em>&mdash;or <em>lifetimes</em>, as some of us core developers like to call them. As lifetimes aren&#8217;t found in any mainstream languages, I thought I&#8217;d expand upon why we want them and how they can be used to improve memory management for performance (especially interactive performance) without sacrificing safety. In this first post I&#8217;ll explain why existing memory models weren&#8217;t enough and why we went searching for alternatives. Here I&#8217;m assuming basic knowledge of garbage collection, reference counting, and <code>malloc</code>/<code>free</code>, but nothing more.</p>

<p>The programming models that the current crop of mainstream programming languages expose can be divided pretty evenly into two camps: <em>explicitly-managed</em> environments and <em>garbage-collected</em> enivornments. By far, the most common programming languages built around explicitly-managed environments are C, C++, and Objective-C, and explicit memory management is so associated with these languages that it&#8217;s often just called &#8220;the C memory model&#8221;. Almost all other languages in mainstream use are garbage collected&mdash;Java, C#, JavaScript, Python, Ruby, Lisp, Perl, and tons of other languages all fall into this camp. (Note that here I&#8217;m using &#8220;garbage collection&#8221; in the general sense to mean automatic memory management; some of these languages don&#8217;t have <em>tracing</em> garbage collection and instead use reference counting.)</p>

<p>Now C and its derivatives famously offer a huge amount of control over memory usage&mdash;the built-in language features make it easy to implement stack allocation, ownership (i.e. explicit <code>new</code> and <code>delete</code>), memory pools, and reference counting (manually or with smart pointers or Objective-C&#8217;s Automatic Reference Counting). Most large C/C++/Objective-C codebases use all four strategies. Some programs (like Firefox and OS kernels) even implement their own general-purpose memory allocators. (A few use conservative garbage collectors, like the Boehm GC, but these are in the minority, so I&#8217;ll leave them aside.) This flexibility has a real benefit, especially for real-time and interactive apps (like web browsers!). Not only does explicit memory management tend to spread out the load so that pauses associated with tracing GC don&#8217;t appear, but it also provides a clear path toward improving performance whenever <code>malloc</code> and <code>free</code> do become expensive. In C++, for example, if you profile a program and see lots of expensive calls to <code>operator new</code> near the top, you can often just drop the <a href="http://www.boost.org/doc/libs/1_47_0/libs/pool/doc/index.html">Boost pool library</a>  into your code, change <code>new</code> to <code>new (pool)</code>, and call it a day.</p>

<p>Of course, all this power comes at a huge cost: namely, memory safety. Dangling pointers, wild pointers, and buffer overruns are not only annoying and costly in terms of hard-to-find bugs but also deadly from a security perspective. Heap spray attacks make any vtable dispatch on a freed object into an exploitable security vulnerability. Think about that for a second: <em>in C++, you&#8217;re always one virtual method call away from an exploitable security vulnerability</em>. You can, of course, mitigate this with sandboxing, but sandboxing has a performance and maintenance cost, and mitigating these costs isn&#8217;t easy.</p>

<p>Recognizing the huge costs associated with manual memory management, a huge amount of programming these days has shifted to languages that require garbage-collected environments. These include all of the scripting languages, as well as Java and C#. Garbage collection brings about enormous productivity savings (because the programmer doesn&#8217;t have to think as much about memory management) and also enormous security benefits. An entire class of security vulnerabilities (buffer overruns, use-after-free, stack overflow) basically cease to exist for programs running in a garbage-collected environment (to be replaced by exciting new security vulnerabilities such as SQL injection, but that&#8217;s another story).</p>

<p>The problem with garbage collection is that, now that memory management isn&#8217;t explicit (i.e. that when to recycle memory can&#8217;t be statically known by the compiler anymore), lifetimes have to be discovered at runtime&mdash;and that entails a performance cost. Tracing stop-the-world garbage collectors (and cycle collectors) have to suspend the entire program for pauses that can last hundreds of milliseconds, a fact which hurts lots of programs&mdash;for instance, mobile apps really need to be able to draw at 60 frames per second, ruling out any pause longer than 16 ms. Incremental garbage collection is better, but it&#8217;s tricky to implement and causes a loss of throughput, because the compiler has to insert extra operations on every modification of a pointer. And because everything has to essentially be done dynamically (barring simple static analyses like escape analysis), there will always be scenarios in which a fully garbage collected system loses to a manually-managed one&mdash;and both major open source web browser engines have zero tolerance for performance regressions.</p>

<p>There are many workarounds in garbage-collected languages for the lack of manual memory management. For example, <em>free lists</em> are a popular technique in languages like Java to reduce GC pause times. The idea is simple&mdash;when you have a large number of objects of the same type that you constantly allocate and deallocate, you keep a pool of old objects around and reuse them. The programmer is then responsible for manually allocating and deallocating objects from this free list. This is definitely an effective way to reduce allocations when it&#8217;s needed. But, unfortunately, there are a number of downsides to this approach.</p>

<p>First of all, garbage-collected languages usually don&#8217;t have any built-in syntax for creating objects out of a free list instead of the heap. The built-in constructor for the object can only be called on a fresh heap allocation. The usual workaround for this is to create an <code>init</code> method on the object or to create a factory object, but all of those approaches tend to look awkward syntactically. This problem itself isn&#8217;t a deal-breaker&mdash;after all, Java programmers frequently make factory classes for other reasons&mdash;but it does compound the awkwardness of the free list pattern. Of course, in and of itself, this wouldn&#8217;t be sufficient grounds to add a large amount of complexity to a garbage-collected language to support this pattern.</p>

<p>But there&#8217;s a much worse problem: <em>free lists are inherently unsafe</em>. They aren&#8217;t unsafe in the same way as C++, to be sure&mdash;in C++, there are serious security vulnerabilities to contend with&mdash;but they still allow for many of the same bugs that dangling pointers entail. To see why, notice that a free list has no idea when no more references remain to the objects that it hands out. In fact, it can&#8217;t know how many references remain to the objects allocated within it&mdash;at least, not without reference counting or tracing the object graph, which would lead back to GC and defeat the purpose of the free list! So a free list must require manual memory management. When the programmer frees an object that&#8217;s managed by a free list, it&#8217;s the programmer&#8217;s responsibility to ensure that no more references to it remain. If the programmer accidentally leaks a reference, then that object might be reused for a new instance, and a potentially hard-to-find bug will result. It&#8217;s <code>malloc</code> and <code>free</code> all over again.</p>

<p>The end result of this is that we seem to be trapped between the rock of unpredictable performance and the hard place of programmer burdens and security vulnerabilities. The current set of commonly-used languages don&#8217;t provide solutions here.</p>

<p>Fortunately, the research landscape offers some promising potential solutions, which I&#8217;ll cover next time.</p>
]]></content>
  </entry>
  
</feed>
